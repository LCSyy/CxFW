import QtQuick.tooling 1.1

// There always is a single Module object that contains all
// Component objects.
Module {
    // A Component object directly corresponds to a type exported
    // using the QML_ELEMENT or QML_NAMED_ELEMENT macros.
    Component {

        // The name is a unique identifier used to refer to this type.
        // It is recommended you simply use the C++ type name.
        name: "Theme"

        // The name of the prototype Component.
        prototype: "QObject"

        // The name of the default property.
        defaultProperty: ""

        // The name of the type containing attached properties
        // and methods.
        attachedType: ""

        // The list of exports determines how a type can be imported.
        // Each string has the format "URI/Name version". The URI is
        // the import name given via the build system, for example as
        // QML_IMPORT_NAME in qmake. The name is either the C++ class
        // name or, in case of QML_NAMED_ELEMENT(), an explicitly given
        // name. The version is constructed from the major version
        // given via the build system, as QML_IMPORT_MAJOR_VERSION in
        // qmake, and any revisions given in the class or its base
        // classes by Q_REVISION(), the REVISION argument to Q_PROPERTY,
        // or QML_ADDED_IN_MINOR_VERSION(). Usually types are only
        // exported once, if at all. The following tells us that there
        // are two variants of Animation, and that 'import QtQuick 2.0'
        // will expose a different revision than imports of later
        // versions.
        exports: [
            "CxQuick 0.1"
        ]

        // The meta object revisions for the exports specified in 'exports'.
        // Each meta object revision may add additional properties or methods,
        // relative to the previous one. Those will only be visible when the
        // module is imported with at least the corresponding version as
        // specified in the 'exports' list.
        // The exportMetaObjectRevisions list must have exactly the same
        // length as the 'exports' list. For example, the 'animations' property
        // described below will only be available through the QtQuick/Animation
        // 2.1 export. Usually the revisions will match the versions in the
        // 'exports' list.
        // exportMetaObjectRevisions: [0, 1]

        Property { name: "baseMargin"; type: "int"; isReadonly: true }
        Property { name: "contentHeight"; type: "int"; isReadonly: true }
        Property { name: "toolBarHeight"; type: "int"; isReadonly: true }
        Property { name: "bgDeepColor"; type: "color"; isReadonly: true }
        Property { name: "bgNormalColor"; type: "color"; isReadonly: true }
        Property { name: "bgLightColor"; type: "color"; isReadonly: true }
        Property { name: "fgDeepColor"; type: "color"; isReadonly: true }
        Property { name: "fgNormalColor"; type: "color"; isReadonly: true }
        Property { name: "fgLightColor"; type: "color"; isReadonly: true }

//        Enum {
//            name: "Loops"
//            values: [ "Infinite", "OnceOnly" ]
//        }

        // Signal and Method work the same way. The inner Parameter
        // declarations also support the isReadonly, isPointer and isList
        // attributes which mean the same as for Property
//        Method { name: "restart" }
//        Signal { name: "started"; revision: 1 }
//        Signal {
//            name: "runningChanged"
//            Parameter { type: "bool" }
//            Parameter { name: "foo"; type: "bool" }
//        }
    }

    Component {
        name: "ListModel"
        prototype: "QObject"
        defaultProperty: ""
        attachedType: ""
        exports: [
            "CxQuick 0.1"
        ]
        Property { name: "roleNames"; type: "list"; isReadonly: true }
        Method { name: "append" }
        Method { name: "count" }
        Method { name: "get" }
        Method { name: "set" }
        Method { name: "insert" }
        Method { name: "move" }
        Method { name: "clear" }
    }
}
